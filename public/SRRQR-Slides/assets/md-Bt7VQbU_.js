import{_ as i}from"./slidev/VSwitch-C-Opp0Zp.js";import{b as l,o as p,w as o,g as m,e as u,z as e,v as d,x as f,E as n}from"./modules/vue-D-V5T23k.js";import{I as h}from"./slidev/default-D7QdIGX7.js";import{u as g,f as c}from"./slidev/context-CiKXUAFA.js";import"./modules/shiki-DlUChZ4r.js";import"./index-BM2v8R4J.js";const B={__name:"slides.md__slidev_38",setup(w){const{$clicksContext:r,$frontmatter:s}=g();return r.setup(),(C,t)=>{const a=i;return p(),l(h,d(f(n(c)(n(s),37))),{default:o(()=>[t[5]||(t[5]=m("h1",null,"The Implementation Story",-1)),u(a,null,{"1-6":o(()=>t[0]||(t[0]=[e(" 1. Started with an python implementation, where the entire logic happens in C/Fortran and python only exists for the outer-loop logic. ")])),"2-6":o(()=>t[1]||(t[1]=[e(" 2. Sadly, when we ran this on Kahan-300, the rank was still 300. Indicating an issue with the implementation. ")])),"3-6":o(()=>t[2]||(t[2]=[e(" 3. After a long search through the interwebs, Found a paper from 1990s. It's called ACM 782 by CH Bischof. It's a paper about the efficient implementation of the RRQR, Block QRCP algorithms in Fortran. ")])),"4-6":o(()=>t[3]||(t[3]=[e(" 4. Thus started a long journey into understanding fortran code, compiling fortran code, the organizing of source code of LAPACK, CALGO, etc... ")])),"5-6":o(()=>t[4]||(t[4]=[e(" 5. This led to some nice fruits. ")])),_:1})]),_:1},16)}}};export{B as default};
